from collections import defaultdict


class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:

        #  build graph
        graph = defaultdict(dict)
        visited = set()
        for i, (num, den) in enumerate(equations):
            graph[num][den] = values[i]
            graph[den][num] = 1/values[i]

        def DFS(start, destination, product, visited):
            visited.add(start)
            ret = -1.0
            neighbors = graph[start]
            if destination in neighbors:
                ret = product * graph[destination]
            else:
                for neighbor, value in neighbors.items():
                    if neighbor in visited:
                        continue

                    ret = (DFS(neighbor, destination, product * value, visited))
                    if ret != -1.0:
                        break
            visited.remove(start)
            return ret
        result = []
        for dividend, divisor in queries:

            if dividend not in graph or divisor not in graph:
                return -1
            if dividend == divisor:
                return 1
            else:
                ret = DFS(dividend, divisor, 1, visited)
                result.append(ret)

        return result
