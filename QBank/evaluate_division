from collections import defaultdict


class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:

        #  build graph
        graph = defaultdict(dict)
        visited = set()
        for i, (num, den) in enumerate(equations):
            graph[num][den] = values[i]
            graph[den][num] = 1/values[i]

        def DFS(start, destination, product, visited):
            visited.add(start)
            ret = -1.0
            neighbors = graph[start]
            if destination in neighbors:
                ret = product * graph[destination]
            else:
                for neigbor, value in neighbors.items():
                    if neigbor in visited:
                        continue
